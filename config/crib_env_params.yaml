
turtlebot2: #namespace

    running_step: 0.04 # amount of time the control will be executed
    pos_step: 0.016     # increment in position for each command
    
    #qlearn parameters
    alpha: 1.0
    gamma: 0.7
    epsilon: 0.9
    epsilon_discount: 0.999
    nepisodes: 500
    nsteps: 500
    number_splits: 10 #set to change the number of state splits for the continuous problem and also the number of env_variable splits

    running_step: 0.06 # Time for each step
    wait_time: 0.1 # Time to wait in the reset phases

    n_actions: 16 # We have 4 linear actions, 4 angular actions
    n_observations: 7 # We have 7 different observations

    speed_step: 1.0 # Time to wait in the reset phases

    linear_speed: 0.2 # Spawned for going forwards
    angular_speed: 0.2 # Angular speed when turning Left or Right
    init_linear_speed: 0.0 # Initial linear speed in which we start each episode
    init_angular_speed: 0.0 # Initial angular speed in which we start each episode
    
    new_ranges: 5 # How many laser readings we jump in each observation reading, the bigger the less laser resolution
    min_range: 0.5 # Minimum meters below wich we consider we have crashed
    obs_high: [16, 16, 2, 2, 1, 1, 0.5]
    obs_low: [-16, -16, -2, -2, -1, -1, -0.5]
    
    min_laser_value: 0 # Value considered there is an obstacle or crashed
    max_laser_value: 6 # Value considered Ok, no wall

    number_of_sectors: 3 # How many sectors we have
    min_range: 0.5 # Minimum meters below wich we consider we have crashed
    middle_range: 1.0 # Minimum meters below wich we consider we have crashed
    danger_laser_value: 2 # Value considered Ok, no wall
    middle_laser_value: 1 # Middle value
    safe_laser_value: 0 # Value considered there is an obstacle or crashed
    
    reward: -1 # Points Given
    

